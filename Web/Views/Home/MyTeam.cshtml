@model MyTeamViewModel
@{
    ViewData["Title"] = "My Team";
}

<style>
    .budget-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding: 0 20px;
        gap: 10px;
    }
    
    .budget-item {
        flex: 1;
        text-align: center;
        padding: 15px 10px;
        border-radius: 8px;
        color: white;
        font-weight: bold;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    
    .budget-label {
        font-size: 28px;
        margin-bottom: 10px;
        color: white;
        font-weight: normal;
    }
    
    .budget-value {
        font-size: 36px;
        font-weight: bold;
        color: white;
    }
    
    .budget-item:nth-child(1) { 
        background-color: #007bff; 
    }
    .budget-item:nth-child(2) { 
        background-color: #ffc107; 
    }
    .budget-item:nth-child(3) { 
        background-color: #28a745; 
    }
    .budget-item:nth-child(4) { 
        background-color: #17a2b8; 
    }
    
    .round-navigation {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin: 20px 0;
    }
    
    .round-btn {
        background: #007bff;
        color: white;
        border: none;
        padding: 16px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 24px;
        font-weight: bold;
    }
    
    .round-btn:hover {
        background: #0056b3;
    }
    
    .round-btn:disabled {
        background: #6c757d;
        cursor: not-allowed;
    }
    
    .current-round {
        background: #007bff;
        color: white;
        padding: 20px 40px;
        border-radius: 8px;
        font-weight: bold;
        min-width: 200px;
        text-align: center;
        font-size: 24px;
    }
    
    .clear-team-btn {
        background: #ffc107;
        color: black;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        margin: 10px 0;
    }
    
    .clear-team-btn:hover {
        background: #e0a800;
    }
    
    .total-points {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        color: #dc3545;
        margin: 20px 0;
    }
    
    /* Statistics breakdown styling */
    .stats-breakdown {
        margin: 15px 0;
    }
    
    .stat-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #eee;
    }
    
    .stat-row:last-child {
        border-bottom: none;
    }
    
    .stat-label {
        font-weight: 500;
        color: #333;
        flex: 1;
    }
    
    .stat-value {
        font-weight: bold;
        color: #007bff;
        min-width: 40px;
        text-align: center;
    }
    
    .stat-points {
        font-weight: bold;
        color: #28a745;
        min-width: 60px;
        text-align: right;
    }
    
    .stat-points.negative {
        color: #dc3545;
    }
    
    .total-row {
        background-color: #f8f9fa;
        padding: 12px;
        border-radius: 6px;
        margin-top: 10px;
    }
    
    .total-row .stat-label {
        font-size: 16px;
        color: #007bff;
    }
    
    .total-row .stat-value {
        font-size: 18px;
        color: #007bff;
    }
    
    .basketball-court {
        position: relative;
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        background-image: url('/images/basketball_court.png');
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        height: 500px;
        margin-bottom: 20px;
        background-color: transparent;
    }
    
    .court-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
    .position-slot {
        position: absolute;
        display: flex;
        flex-direction: column;
        align-items: center;
        cursor: pointer;
        width: 120px;
        min-height: 180px;
        height: auto;
    }

    
    .position-pg { top: 3%; left: 20%; }
    .position-sg { top: 52%; left: 15%; }
    .position-sf { top: 52%; right: 15%; }
    .position-pf { top: 3%; right: 20%; }
    .position-c { top: 50%; left: 50%; transform: translate(-50%, -50%); }
    
    .jersey-image {
        width: 120px;
        height: 120px;
        object-fit: contain;
        margin-bottom: 5px;
    }
    
    .position-label {
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
        margin-bottom: 5px;
    }
    
    .position-slot .player-name {
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 11px;
        width: 100%;
        line-height: 1.2;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        flex-wrap: wrap;
        word-break: break-word;
        hyphens: auto;
    }

    .round-points {
        background: rgba(255, 215, 0, 0.9);
        color: black;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 10px;
    }
    
    .round-points.chosen {
        background: rgba(40, 167, 69, 0.9);
        color: white;
        font-size: 14px;
        font-weight: bold;
        padding: 4px 8px;
        border: 2px solid #28a745;
    }
    
    .round-points.not-chosen {
        background: rgba(220, 53, 69, 0.9);
        color: white;
        font-size: 14px;
        font-weight: bold;
        padding: 4px 8px;
        border: 2px solid #dc3545;
    }
    
    .remove-btn {
        position: absolute !important;
        top: -8px !important;
        right: -8px !important;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 50%;
        width: 26px;
        height: 26px;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        box-shadow: 0 2px 6px rgba(0,0,0,0.4);
        line-height: 1;
        transition: all 0.2s ease;
        margin: 0 !important;
        transform: none !important;
    }
    
    .remove-btn:hover {
        background: #c82333;
        transform: scale(1.15);
        box-shadow: 0 3px 8px rgba(0,0,0,0.5);
    }
    
    .bench-slot{
        display:flex;
        flex-direction:column;
        align-items:center;
        width:120px;
        height:auto;
        cursor: pointer;
    }

    .bench-jersey{
        display:flex;
        flex-direction:column;
        align-items:center;
        gap:5px;
        position: relative;
    }

    .bench-jersey .jersey-image{
        width:120px;
        height:120px;
        object-fit:contain;
        display:block;
        margin:0;
    }

    .bench-jersey .position-label,
    .bench-jersey .player-name{
        position:static;
        left:auto; right:auto; top:auto; bottom:auto;
        transform:none;
    }

    .bench-jersey .position-label{
        background:rgba(0,0,0,.8);
        color:#fff;
        padding:2px 8px;
        border-radius:4px;
        font-size:12px;
        font-weight:700;
    }

    .bench-jersey .player-name{
        background:rgba(0,0,0,.8);
        color:#fff;
        padding:4px 8px;
        border-radius:4px;
        font-size:11px;
        width:100%;
        line-height:1.2;
        display:flex;
        align-items:center;
        justify-content:center;
        text-align:center;
        min-height: 0; 
        white-space: normal;
        word-break: break-word;
        hyphens: auto;
    }

    /* Bench section - white background */
    .bench-section {
        background: white;
        padding: 20px;
        border-radius: 8px;
    }
    
    /* Main team section grouping - budget + court + bench */
    .team-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 12px;
        margin: 20px 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    /* Player selection section grouping */
    .player-selection-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 12px;
        margin: 20px 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    /* Make filters bigger and closer to cards */
    .filters {
        margin-bottom: 15px;
        font-size: 16px;
    }
    
    .filters select, .filters input {
        font-size: 16px;
        padding: 8px 12px;
    }

    /* Modal styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 0;
        border: none;
        border-radius: 8px;
        width: 80%;
        max-width: 500px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        background-color: #007bff;
        color: white;
        padding: 20px;
        border-radius: 8px 8px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h3 {
        margin: 0;
        font-size: 1.5rem;
    }

    .close {
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        line-height: 1;
    }

    .close:hover {
        opacity: 0.7;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-body p {
        margin: 10px 0;
        font-size: 1rem;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #dee2e6;
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
        text-decoration: none;
        display: inline-block;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background-color: #545b62;
    }
    
    .filters-section {
        background: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .filter-row {
        display: flex;
        gap: 15px;
        align-items: center;
        flex-wrap: wrap;
    }
    
    .filter-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }
    
    .filter-label {
        font-size: 12px;
        font-weight: bold;
        color: #333;
    }
    
    .filter-select {
        padding: 5px 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
    }
    
    .players-list {
        margin-top: 20px;
        max-height: 600px;
        overflow-y: auto;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 12px;
        padding: 10px;
    }
    
    .player-item {
        display: flex;
        flex-direction: column;
        background: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        transition: all 0.3s ease;
        min-height: 180px;
        text-align: center;
    }
    
    .player-item:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }
    
    .player-name {
        font-weight: bold;
        font-size: 13px; /* slightly bigger for better readability */
        color: #000;
        margin-bottom: 8px; /* reduced for consistent spacing */
        text-align: center;
        background: transparent; /* remove dark fill on selection cards */
        padding: 0;
        border-radius: 0;
        min-height: 30px; /* adjusted height for slightly bigger text */
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .team-jersey {
        width: 100px; /* slightly smaller for 7-per-row layout */
        height: 100px; /* slightly smaller for 7-per-row layout */
        object-fit: contain;
        margin: 0 auto 8px auto; /* reduced for consistent spacing */
        display: block;
        background: transparent;
    }
    
    .player-team {
        color: #007bff;
        font-weight: 600;
        font-size: 18px; /* slightly bigger details */
        margin-bottom: 6px; /* reduced for consistent spacing */
        text-align: center;
    }
    
    .player-details {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 8px;
        margin-bottom: 8px; /* reduced for consistent spacing */
    }
    
    .player-position {
        color: #28a745;
        font-weight: 600;
        font-size: 16px; /* slightly bigger */
    }
    
    .player-cost {
        color: #ffc107;
        font-weight: bold;
        font-size: 16px; /* slightly bigger */
    }
    
    .player-actions {
        margin-top: auto;
        display: flex;
        justify-content: center;
    }
    
    .add-player-btn {
        background: #28a745;
        color: white;
        border: none;
        padding: 12px 24px; /* slightly smaller */
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px; /* slightly smaller */
    }
    
    .add-player-btn:hover {
        background: #218838;
    }
    
    .add-player-btn:disabled {
        background: #6c757d;
        cursor: not-allowed;
    }
    
    .alert {
        padding: 10px 15px;
        border-radius: 4px;
        margin: 10px 0;
    }
    
    .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }
    
    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
    
    .alert-warning {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }
    
    .alert-info {
        background: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }
</style>

<div class="container-fluid">    
    <!-- Team Section (Budget + Court + Bench) -->
    <div class="team-section">
        <!-- Budget Information -->
        <div class="budget-info">
            <div class="budget-item">
                <div class="budget-label">Total Budget</div>
                <div class="budget-value">@Model.TotalBudget</div>
            </div>
            <div class="budget-item">
                <div class="budget-label">Used Budget</div>
                <div class="budget-value">@Model.UsedBudget</div>
            </div>
            <div class="budget-item">
                <div class="budget-label">Remaining Budget</div>
                <div class="budget-value">@Model.RemainingBudget</div>
            </div>
            <div class="budget-item">
                <div class="budget-label">Players Selected</div>
                <div class="budget-value">@Model.SelectedPlayersCount/10</div>
            </div>
        </div>
        
        <!-- Round Navigation -->
        <div class="round-navigation">
            <button class="round-btn" onclick="changeRound(@(Model.CurrentRound - 1))" 
                    @(Model.CurrentRound <= 1 ? "disabled" : "")>&lt;</button>
            <div class="current-round">Round @Model.CurrentRound</div>
            <button class="round-btn" onclick="changeRound(@(Model.CurrentRound + 1))" 
                    @(Model.CurrentRound >= Model.MaxRound ? "disabled" : "")>&gt;</button>
        </div>
        
        <!-- Total Points -->
        <div class="total-points">@Model.RoundPoints points</div>
        <!-- Basketball Court -->
        <div class="basketball-court">
            <div class="court-overlay">
                @{
                    var courtPlayers = Model.CurrentRoundTeam.Where(ft => ft.IsOnCourt).ToList();
                    var positions = new[] { "PG", "SG", "SF", "PF", "C" };
                }
                
                @foreach (var position in positions)
                {
                    var player = courtPlayers.FirstOrDefault(ft => ft.Player.Position == position);
                    <div class="position-slot position-@position.ToLower()" data-position="@position" onclick="showPlayerDetails('@position', true)">
                        <div class="position-label">@position</div>
                        @if (player != null)
                        {
                            <img src="/images/jerseys/@(player.Player.Team?.Name?.ToLower()?.Replace(" ", "_") ?? "empty").png" 
                                 alt="@player.Player.Name" class="jersey-image" />
                            <div class="player-name">@player.Player.Name</div>
                            @if (Model.IsHistoricalRound && Model.PlayerRoundPoints.ContainsKey(player.PlayerId))
                            {
                                var isChosen = Model.PlayerIsChosen.ContainsKey(player.PlayerId) ? Model.PlayerIsChosen[player.PlayerId] : true;
                                var cssClass = isChosen ? "chosen" : "not-chosen";
                                <div class="round-points @cssClass">@Model.PlayerRoundPoints[player.PlayerId] pts</div>
                            }
                            @if (!Model.IsHistoricalRound)
                            {
                                <button class="remove-btn" onclick="event.stopPropagation(); removePlayer(@player.PlayerId)">×</button>
                            }
                        }
                        else
                        {
                            <img src="/images/jerseys/empty.png" alt="Empty" class="jersey-image" />
                            <div class="player-name">Empty</div>
                        }
                    </div>
                }
            </div>
        </div>
        
        <!-- Bench Section -->
        <div class="bench-section">
            <div class="bench-players">
                @{
                    var benchPlayers = Model.CurrentRoundTeam.Where(ft => !ft.IsOnCourt).ToList();
                }
                
                @foreach (var position in positions)
                {
                    var player = benchPlayers.FirstOrDefault(ft => ft.Player.Position == position);
                    <div class="bench-slot" data-position="@position" onclick="showPlayerDetails('@position', false)">
                        <div class="bench-jersey">
                            <div class="position-label">@position</div>
                            @if (player != null)
                            {
                                <img src="/images/jerseys/@(player.Player.Team?.Name?.ToLower()?.Replace(" ", "_") ?? "empty").png" 
                                     alt="@player.Player.Name" class="jersey-image" />
                                <div class="player-name">@player.Player.Name</div>
                                @if (Model.IsHistoricalRound && Model.PlayerRoundPoints.ContainsKey(player.PlayerId))
                                {
                                    var isChosen = Model.PlayerIsChosen.ContainsKey(player.PlayerId) ? Model.PlayerIsChosen[player.PlayerId] : true;
                                    var cssClass = isChosen ? "chosen" : "not-chosen";
                                    <div class="round-points @cssClass">@Model.PlayerRoundPoints[player.PlayerId] pts</div>
                                }
                                @if (!Model.IsHistoricalRound)
                                {
                                    <button class="remove-btn" onclick="event.stopPropagation(); removePlayer(@player.PlayerId)">×</button>
                                }
                            }
                            else
                            {
                                <img src="/images/jerseys/empty.png" alt="Empty" class="jersey-image" />
                                <div class="player-name">Empty</div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!-- Player Selection Section -->
    @if (!Model.IsHistoricalRound)
    {
        <div class="player-selection-section">
            <div class="filters-section">
                <div class="filter-row">
                    <div class="filter-group">
                        <label class="filter-label">Position</label>
                        <select id="positionFilter" class="filter-select" onchange="filterPlayers()">
                            <option value="">All Positions</option>
                            <option value="PG">Point Guard</option>
                            <option value="SG">Shooting Guard</option>
                            <option value="SF">Small Forward</option>
                            <option value="PF">Power Forward</option>
                            <option value="C">Center</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Team</label>
                        <select id="teamFilter" class="filter-select" onchange="filterPlayers()">
                            <option value="">All Teams</option>
                            @foreach (var team in Model.AvailablePlayers.Select(p => p.Team?.Name).Distinct().OrderBy(t => t))
                            {
                                <option value="@team">@team</option>
                            }
                        </select>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Max Cost</label>
                        <select id="costFilter" class="filter-select" onchange="filterPlayers()">
                            <option value="">No Limit</option>
                            <option value="5">5 or less</option>
                            <option value="10">10 or less</option>
                            <option value="15">15 or less</option>
                            <option value="20">20 or less</option>
                            <option value="25">25 or less</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <!-- Available Players -->
            <div class="players-list" id="playersList">
                @foreach (var player in Model.AvailablePlayers)
                {
                    var isSelected = Model.CurrentRoundTeam.Any(ft => ft.PlayerId == player.Id);
                    var canAdd = !isSelected && Model.RemainingBudget >= player.Cost && Model.SelectedPlayersCount < 10;
                    
                    <div class="player-item" data-position="@player.Position" data-team="@player.Team?.Name" data-cost="@player.Cost">
                        <div class="player-name">@player.Name</div>
                        <img src="/images/jerseys/@(player.Team?.Name?.ToLower() ?? "empty").png" 
                             alt="@(player.Team?.Name ?? "No Team")" 
                             class="team-jersey" 
                             onerror="this.src='/images/jerseys/empty.png'">
                        <div class="player-team">@(player.Team?.Name ?? "No Team")</div>
                        <div class="player-details">
                            <span class="player-position">@player.Position</span>
                            <span class="player-cost">@player.Cost M</span>
                        </div>
                        <div class="player-actions">
                            <button class="add-player-btn" onclick="addPlayer(@player.Id)" 
                                    @(canAdd ? "" : "disabled")>
                                @(isSelected ? "Selected" : "Add")
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <strong>Historical Round:</strong> You are viewing Round @Model.CurrentRound. Team management is not available for past rounds.
        </div>
    }
</div>

<script>
    // Store team data for JavaScript
    window.teamData = @Html.Raw(Json.Serialize(Model.CurrentRoundTeam.Select(ft => new { 
        PlayerId = ft.PlayerId, 
        Position = ft.Player.Position, 
        IsOnCourt = ft.IsOnCourt 
    })));

    function changeRound(round) {
        if (round >= 1 && round <= @Model.MaxRound) {
            window.location.href = '/myteam?round=' + round;
        }
    }

    function clearTeam() {
        if (confirm('Are you sure you want to clear your entire team?')) {
            fetch('/api/TeamManagement/clear-team', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('success', data.message);
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showAlert('danger', data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('danger', 'An error occurred while clearing the team.');
            });
        }
    }

    function addPlayer(playerId) {
        fetch('/api/TeamManagement/add-player', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ playerId: playerId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('success', data.message);
                saveFilterValues();
                // Reload the page to show updated team
            } else {
                showAlert('danger', data.message);
            }
        })
        .then(() => {
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('danger', 'An error occurred while adding the player.');
        });
    }

    function removePlayer(playerId) {
        if (confirm('Are you sure you want to remove this player?')) {
            fetch('/api/TeamManagement/remove-player', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ playerId: playerId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('success', data.message);
                    // Reload the page to show updated team
                } else {
                    showAlert('danger', data.message);
                }
            })
            .then(() => {
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('danger', 'An error occurred while removing the player.');
            });
        }
    }

    function filterPlayers() {
        const positionFilter = document.getElementById('positionFilter').value;
        const teamFilter = document.getElementById('teamFilter').value;
        const costFilter = document.getElementById('costFilter').value;
        
        const playerItems = document.querySelectorAll('.player-item');
        
        playerItems.forEach(item => {
            const position = item.dataset.position;
            const team = item.dataset.team;
            const cost = parseInt(item.dataset.cost);
            
            let show = true;
            
            if (positionFilter && position !== positionFilter) {
                show = false;
            }
            
            if (teamFilter && team !== teamFilter) {
                show = false;
            }
            
            if (costFilter && cost > parseInt(costFilter)) {
                show = false;
            }
            
            item.style.display = show ? 'flex' : 'none';
        });
    }

    function saveFilterValues() {
        const positionFilter = document.getElementById('positionFilter');
        const teamFilter = document.getElementById('teamFilter');
        const costFilter = document.getElementById('costFilter');
        
        if (positionFilter) localStorage.setItem('positionFilter', positionFilter.value);
        if (teamFilter) localStorage.setItem('teamFilter', teamFilter.value);
        if (costFilter) localStorage.setItem('costFilter', costFilter.value);
    }

    function restoreFilterValues() {
        const positionFilter = document.getElementById('positionFilter');
        const teamFilter = document.getElementById('teamFilter');
        const costFilter = document.getElementById('costFilter');
        
        if (positionFilter && localStorage.getItem('positionFilter')) {
            positionFilter.value = localStorage.getItem('positionFilter');
        }
        if (teamFilter && localStorage.getItem('teamFilter')) {
            teamFilter.value = localStorage.getItem('teamFilter');
        }
        if (costFilter && localStorage.getItem('costFilter')) {
            costFilter.value = localStorage.getItem('costFilter');
        }
        
        if (positionFilter || teamFilter || costFilter) {
            filterPlayers();
        }
    }

    function showAlert(type, message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type}`;
        alertDiv.textContent = message;
        alertDiv.style.position = 'fixed';
        alertDiv.style.top = '20px';
        alertDiv.style.right = '20px';
        alertDiv.style.zIndex = '9999';
        alertDiv.style.minWidth = '300px';
        
        document.body.appendChild(alertDiv);
        
        setTimeout(() => {
            alertDiv.remove();
        }, 3000);
    }

    // Restore filter values on page load
    document.addEventListener('DOMContentLoaded', function() {
        restoreFilterValues();
    });

    // Player details and swap functionality
    function showPlayerDetails(position, isOnCourt) {
        const player = getPlayerAtPosition(position, isOnCourt);
        if (player) {
            showPlayerModal(player, position, isOnCourt);
        } else {
            showEmptySlotModal(position, isOnCourt);
        }
    }

    function getPlayerAtPosition(position, isOnCourt) {
        // Get the current team data from the page - build it manually to avoid serialization issues
        const teamData = [];
        
        @foreach (var ft in Model.CurrentRoundTeam)
        {
            var detailedStats = Model.PlayerDetailedStats.ContainsKey(ft.PlayerId) ? Model.PlayerDetailedStats[ft.PlayerId] : null;
            <text>
            teamData.push({
                PlayerId: @ft.PlayerId,
                PlayerName: '@Html.Raw(ft.Player.Name.Replace("'", "\\'"))',
                Position: '@ft.Player.Position',
                TeamName: '@Html.Raw((ft.Player.Team?.Name ?? "").Replace("'", "\\'"))',
                Cost: @ft.Player.Cost,
                IsOnCourt: @ft.IsOnCourt.ToString().ToLower(),
                RoundPoints: @(Model.PlayerRoundPoints.ContainsKey(ft.PlayerId) ? Model.PlayerRoundPoints[ft.PlayerId] : 0),
                @if (detailedStats != null)
                {
                    <text>
                    Points: @detailedStats.Points,
                    Rebounds: @detailedStats.Rebounds,
                    Assists: @detailedStats.Assists,
                    Steals: @detailedStats.Steals,
                    Blocks: @detailedStats.Blocks,
                    Turnovers: @detailedStats.Turnovers,
                    Score: '@detailedStats.Score'
                    </text>
                }
                else
                {
                    <text>
                    Points: 0,
                    Rebounds: 0,
                    Assists: 0,
                    Steals: 0,
                    Blocks: 0,
                    Turnovers: 0,
                    Score: 'L'
                    </text>
                }
            });
            </text>
        }
        
        // Convert boolean to string for comparison to handle any serialization issues
        const isOnCourtStr = isOnCourt ? "true" : "false";
        const found = teamData.find(p => {
            return p.Position === position && String(p.IsOnCourt) === isOnCourtStr;
        });
        
        return found;
    }

    function showPlayerModal(player, position, isOnCourt) {
        const modal = document.getElementById('playerModal');
        const modalContent = document.getElementById('playerModalContent');
        
        let modalBody = `
            <div class="modal-header">
                <h3>${player.PlayerName || 'Unknown Player'}</h3>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body">
                <p><strong>Position:</strong> ${player.Position || 'Unknown'}</p>
                <p><strong>Team:</strong> ${player.TeamName || 'No Team'}</p>
                <p><strong>Cost:</strong> ${player.Cost || 'Unknown'} M</p>
                <p><strong>Status:</strong> ${isOnCourt ? 'On Court' : 'On Bench'}</p>
        `;
        
        @if (Model.IsHistoricalRound)
        {
            <text>
            // Add detailed statistics breakdown for historical rounds
            modalBody += `
                <hr>
                <h4>Round Performance Breakdown</h4>
                <div class="stats-breakdown">
                    <div class="stat-row">
                        <span class="stat-label">Points Scored:</span>
                        <span class="stat-value">${player.Points || 0}</span>
                        <span class="stat-points">+${player.Points || 0} pts</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Rebounds:</span>
                        <span class="stat-value">${player.Rebounds || 0}</span>
                        <span class="stat-points">+${player.Rebounds || 0} pts</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Assists:</span>
                        <span class="stat-value">${player.Assists || 0}</span>
                        <span class="stat-points">+${player.Assists || 0} pts</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Steals:</span>
                        <span class="stat-value">${player.Steals || 0}</span>
                        <span class="stat-points">+${(player.Steals || 0) * 2} pts</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Blocks:</span>
                        <span class="stat-value">${player.Blocks || 0}</span>
                        <span class="stat-points">+${(player.Blocks || 0) * 2} pts</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Turnovers:</span>
                        <span class="stat-value">${player.Turnovers || 0}</span>
                        <span class="stat-points negative">-${player.Turnovers || 0} pts</span>
                    </div>
                    <div class="stat-row">
                        <span class="stat-label">Team Result:</span>
                        <span class="stat-value">${player.Score || 'L'}</span>
                        <span class="stat-points ${player.Score === 'L' ? 'negative' : ''}">${player.Score === 'W' ? '+5 pts' : '-3 pts'}</span>
                    </div>
                    <hr>
                    <div class="stat-row total-row">
                        <span class="stat-label"><strong>Total Fantasy Points:</strong></span>
                        <span class="stat-value"><strong>${player.RoundPoints || 0}</strong></span>
                    </div>
                </div>
            `;
            </text>
        }
        else
        {
            <text>
            modalBody += `<p><strong>Round Points:</strong> ${player.RoundPoints || 0}</p>`;
            </text>
        }
        
        modalBody += `
            </div>
            <div class="modal-footer">
                @if (!Model.IsHistoricalRound)
                {
                    <button class="btn btn-primary" onclick="swapPlayer('${position}')">Swap Positions</button>
                }
                <button class="btn btn-secondary" onclick="closeModal()">Close</button>
            </div>
        `;
        
        modalContent.innerHTML = modalBody;
        modal.style.display = 'block';
    }

    function showEmptySlotModal(position, isOnCourt) {
        const modal = document.getElementById('playerModal');
        const modalContent = document.getElementById('playerModalContent');
        
        // Check if there's a player in the opposite position (court ↔ bench)
        const oppositePlayer = getPlayerAtPosition(position, !isOnCourt);
        
        let swapButton = '';
        @if (!Model.IsHistoricalRound)
        {
            <text>
            if (oppositePlayer) {
                swapButton = `<button class="btn btn-primary" onclick="swapPlayer('${position}')">Move Player Here</button>`;
            }
            </text>
        }
        
        modalContent.innerHTML = `
            <div class="modal-header">
                <h3>Empty ${position} Position</h3>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body">
                <p>This ${position} position is currently empty.</p>
                <p><strong>Status:</strong> ${isOnCourt ? 'On Court' : 'On Bench'}</p>
                ${oppositePlayer ? `<p><strong>Available:</strong> ${oppositePlayer.PlayerName || 'Unknown Player'} is ${!isOnCourt ? 'on the court' : 'on the bench'}</p>` : ''}
            </div>
            <div class="modal-footer">
                ${swapButton}
                <button class="btn btn-secondary" onclick="closeModal()">Close</button>
            </div>
        `;
        
        modal.style.display = 'block';
    }

    function swapPlayer(position) {
        // Find the court and bench players for this position
        const courtPlayer = getPlayerAtPosition(position, true);
        const benchPlayer = getPlayerAtPosition(position, false);
        
        if (!courtPlayer && !benchPlayer) {
            showAlert('error', 'No players found for this position');
            return;
        }
        
        // If one position is empty, just move the player
        if (!courtPlayer && benchPlayer) {
            // Move bench player to court
            performMove(position, true, false); // from bench (true) to court (false)
        } else if (courtPlayer && !benchPlayer) {
            // Move court player to bench
            performMove(position, false, true); // from court (false) to bench (true)
        } else if (courtPlayer && benchPlayer) {
            // Both positions have players, perform swap
            performSwap(position);
        }
    }

    async function performMove(position, fromIsBench, toIsBench) {
        try {
            const response = await fetch('/api/TeamManagement/swap-players', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    FromPosition: position,
                    FromIsBench: fromIsBench,
                    ToPosition: position,
                    ToIsBench: toIsBench,
                    Round: @Model.CurrentRound
                })
            });
            
            if (response.ok) {
                showAlert('success', 'Player moved successfully!');
                closeModal();
                // Reload the page to show updated positions
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                const error = await response.text();
                showAlert('error', 'Failed to move player: ' + error);
            }
        } catch (error) {
            showAlert('error', 'Error moving player: ' + error.message);
        }
    }

    async function performSwap(position) {
        try {
            const response = await fetch('/api/TeamManagement/swap-players', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    FromPosition: position,
                    FromIsBench: false, // Court player
                    ToPosition: position,
                    ToIsBench: true, // Bench player
                    Round: @Model.CurrentRound
                })
            });
            
            if (response.ok) {
                showAlert('success', 'Players swapped successfully!');
                closeModal();
                // Reload the page to show updated positions
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                const error = await response.text();
                showAlert('error', 'Failed to swap players: ' + error);
            }
        } catch (error) {
            showAlert('error', 'Error swapping players: ' + error.message);
        }
    }

    function closeModal() {
        document.getElementById('playerModal').style.display = 'none';
    }

    // Close modal when clicking outside of it
    window.onclick = function(event) {
        const modal = document.getElementById('playerModal');
        if (event.target === modal) {
            closeModal();
        }
    }
</script>

<!-- Player Details Modal -->
<div id="playerModal" class="modal">
    <div id="playerModalContent" class="modal-content">
    </div>
</div>
